1. SpringAOP

1). 加入 jar 包：

	com.springsource.org.aopalliance-1.0.0.jar
	com.springsource.org.aspectj.weaver-1.6.8.RELEASE.jar
	spring-aop-4.0.0.RELEASE.jar
	spring-aspects-4.0.0.RELEASE.jar
	
	commons-logging-1.1.1.jar
	spring-beans-4.0.0.RELEASE.jar
	spring-context-4.0.0.RELEASE.jar
	spring-core-4.0.0.RELEASE.jar
	spring-expression-4.0.0.RELEASE.jar
	
2). 在配置文件中加入 aop 的命名空间

3). 基于注解的方式
	
	①. 在配置文件中加入如下配置：
		<aop:aspectj-autoproxy></aop:aspectj-autoproxy>
		
	②. 把横切关注点的代码抽象到切面的类中.
		a. 切面首先时一个  IOC 中的 bean, 即加入 @Component 注解
		b. 切面还需要加入 @Aspect 注解
	
	③. 在类中声明各种通知：
		a. 声明一个方法
		b. 在方法前加入 @Before 注解
		
	④. 可以在通知方法中声明一个类型为 JoinPoint 的参数, 然后就能访问链接细节. 如方法名称和参数值.
		@Aspect
		@Component
		public class LoggingAspect {
		
			//声明该方法是一个前置通知: 在目标方法开始之前执行
			@Before("execution(* com.spring.aop.impl.*.*(int, int))")
			public void beforeMethod(JoinPoint joinPoint) {
				String methodName = joinPoint.getSignature().getName();
				List<Object> args = Arrays.asList(joinPoint.getArgs());
				System.out.println("The method "+methodName+" begins with "+args);
			}
			
		}